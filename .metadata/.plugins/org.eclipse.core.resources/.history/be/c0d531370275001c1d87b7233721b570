package com.day18;

import java.awt.BorderLayout;
import java.awt.Frame;
import java.awt.TextArea;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;

public class ClientTest extends Frame implements ActionListener, Runnable {

	private static final long serialVersionUID = 1L;
	
	private TextArea ta = new TextArea();
	private TextField tf = new TextField();
	
	private Socket sc = null; //소켓들은 클래스이고  클래스의 초기값은 null이다.
	private String host = "localhost"; //127.0.0.1 or localhost 는 대명사 느낌 자신의 ip를 자동으로 인식
	private int port = 7777;
	
	
	public ClientTest() {
		
		add(ta, BorderLayout.CENTER);
		add(tf, BorderLayout.SOUTH);
		tf.addActionListener(this);
		
		addWindowListener(new WindowAdapter() {
			
			@Override
			public void windowClosing(WindowEvent e) {
				System.exit(0);
			}
		});
		
		setTitle("채팅클라이언트");
		setSize(300, 400);
		setVisible(true);
		
	}
	
	public void connect() {
		
		try {
			
			sc = new Socket(host, port);
			Thread th = new Thread(this);
			th.start();
			
			
		} catch (Exception e) {
			System.out.println(e.toString());
		}
	}

	
	
	
	public static void main(String[] args) {
		
		new ClientTest().connect();
	}

	
	@Override
	public void run() {
		//데이터를 받을 때
		
		String str;

		
		try {
			
			if(sc == null)
				return;
			
			InputStream is = sc.getInputStream(); //빨대 꼿기
			//빨대에서 흘러나오는 대화를 Bufferedreader에 담음
			BufferedReader br = new BufferedReader(new InputStreamReader(is));
			
						
			while((str=br.readLine()) != null) {
				ta.append("\r\n" + str);
			}
			
		
			
		} catch (Exception e) {
			ta.append("\r\n 클라이언트 연결 종료...");
			sc = null;
			ss = null;
		}
	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		//데이터를 보낼 때
		
		String str = tf.getText();
		
		if(str.trim().equals("null")) { //trim:양쪽의 공백을 없애라
			return;
		}
		
		if(sc==null) {
			return;
		}
		
		try {
			
			// true = flush 
			PrintWriter pw = new PrintWriter(sc.getOutputStream(), true); // 버퍼를 꽉 안채워도 나머지 내보낸다
			pw.println("서버]" + str); // 클라이언트에 전송 - ln을 꼭써야함. 엔터를 쳐야 내보낸다.
			
			ta.append("\r\n서버] : " + str);
			
			tf.setText(""); // null
			tf.requestFocus();
			
		} catch (Exception e) {
			ta.append("\r\n 클라이언트와 접속이 끊겼습니다...");
			sc = null; //클라이언트의 소켓이 끊기면 null로 초기화
		}
	}

}
