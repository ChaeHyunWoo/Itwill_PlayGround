package com.test1;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.validation.BindException;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.SimpleFormController;

// SimpleFormController : 사용자가 폼에서 버튼클릭시 submit이 실행되는데 자동으로 onSubmit() 자동호출
// 창을 띄우기 전에 준비 작업 정보를 referenceData 를 가지고 창에 띄어진다. 
// 그리고 ok버튼누르면 submit실행이 되면 onSubmit이 실행됨
public class LoginController extends SimpleFormController {
	
	private Authenticator authenticator;
	
	// 의존성 주입(DI) - setter만 만든다.
	public void setAuthenticator(Authenticator authenticator) {
		this.authenticator = authenticator;
	}
	
	//2. 로그인버튼을 누르면 subit이 실행되서 이 메서드를 실행한다.
	//   실행되면서 DTO가 command로 넘어와서 여기서 받아준다.
	//   그리고 _ok에 있는 {message}로 던져준다.
	@Override
	protected ModelAndView onSubmit(HttpServletRequest request, 
			HttpServletResponse response, Object command, //입력한 데이터는 command로 들어온다.
			BindException errors) throws Exception {
		
		// ok버튼을 누르면 onSubmit이 자동으로 실행되며 , 데이터는 Object command 에 넘어온다.
		LoginCommand login = (LoginCommand)command;//데이터가 넘어온다
		
		try {
			
			//넘어온 ID,PWD를 넘긴다.
			authenticator.authen(login.getUserId(), login.getUserPwd());
			
			String message = "id: " + login.getUserId();
			message += ", pwd: " + login.getUserPwd();
			message += ", type: " + login.getLoginType();
			
			request.setAttribute("message", message);
			
			// test1폴더에 login_ok한테 넘긴다.
			return new ModelAndView("test1/login_ok");
			
		} catch (Exception e) {
			// 로그인버튼을 누르면 화면이 바뀌므로 창을 다시 보여주게 해야한다.
			return showForm(request, response, errors);// 에러메시지를 가지고 입력창을 다시 띄운다.(다시 로그인을 하게끔)
		}
		
	}
	
	
	//1. 여기에 코딩한 부분이 login.jsp가 뜰때 로그인 타입에 데이터를 띄워준다. 
	//   그래서 여기에는 타입부분에 들어갈 내용을 코딩 ( referenceData가 먼저 실행된다)
	@Override
	protected Map<String, List<String>> referenceData(HttpServletRequest request) throws Exception {
		
		List<String> loginTypes = new ArrayList<>();
		loginTypes.add("일반회원");
		loginTypes.add("기업회원");
		loginTypes.add("특별회원");
		
		// 추가된 리스트는 맵에 추가
		Map<String, List<String>> map = new HashMap<String, List<String>>();
		map.put("loginType", loginTypes);// loginType이라는 이름으로 넘긴다.
		
			
		return map;
		
	}
	
	
}