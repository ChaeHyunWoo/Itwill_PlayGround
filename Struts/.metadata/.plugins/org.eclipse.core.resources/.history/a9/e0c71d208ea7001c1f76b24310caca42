package com.fileTestDB;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts2.ServletActionContext;

import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.ModelDriven;
import com.opensymphony.xwork2.Preparable;
import com.util.FileManager;
import com.util.MyUtil;
import com.util.dao.CommonDAO;
import com.util.dao.CommonDAOImpl;

public class FileTestDBAction extends ActionSupport implements Preparable, ModelDriven<FileTestDBDTO>{

	private static final long serialVersionUID = 1L;
	private FileTestDBDTO dto;
	
	@Override
	public FileTestDBDTO getModel() {
		return dto;
	}

	@Override
	public void prepare() throws Exception {
		dto = new FileTestDBDTO();
	}

	public String created() throws Exception{//파일 업로드
		
		HttpServletRequest request = ServletActionContext.getRequest();
		CommonDAO dao = CommonDAOImpl.getInstance();
		
		if(dto==null||dto.getMode()==null||dto.getMode().equals("")) {
			return INPUT;
		}
		
		HttpSession session = request.getSession();
		
		CustomInfo info = 
				(CustomInfo)session.getAttribute("customInfo");		
		
		String root = session.getServletContext().getRealPath("/");
		String savePath = root + "pds" + File.separator + "data";
		
		if(!dto.getSubject().equals("")) {
		
			saveFileName = FileManager.doFileUpload(dto.getUpload(), dto.getUploadFileName(), savePath);

			originalFileName = dto.getUploadFileName();

			int maxBoardNum = dao.getIntValue("fileTestDB.maxBoardNum");

			dto.setNum(maxBoardNum + 1);
			dto.setSaveFileName(saveFileName);
			dto.setOriginalFileName(originalFileName);
			dto.setUserIdTxt(info.getUserId());
			
			dao.insertData("fileTestDB.insertData", dto);
		}
		
		return SUCCESS;		
	}
	
	public String download() throws Exception{//파일 다운로드
		
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		HttpSession session = request.getSession();
		
		String root = session.getServletContext().getRealPath("/");
		String savePath = root + "pds" + File.separator + "data";		
		
		FileManager.doFileDownload(response, saveFileName, 
				originalFileName, savePath);
		
		return null;
	}	
	
	public String down() throws Exception{//파일 보기
		
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		
		String root = session.getServletContext().getRealPath("/");
		String savePath = root + "pds" + File.separator + "data";			
		
		originalFileName = new String(originalFileName.getBytes("euc-kr"),"8859_1");
		
		String fullFileName = savePath + File.separator +saveFileName;
		
		inputStream = new FileInputStream(fullFileName);
		
		return SUCCESS;
	}	

	public String write() throws Exception{
		return SUCCESS;
	}	
	
	public String list() throws Exception{
		
		HttpServletRequest request = ServletActionContext.getRequest();
		CommonDAO dao = CommonDAOImpl.getInstance();
		MyUtil myUtil = new MyUtil();
		
		String pageNum = dto.getPageNum();
		
		int currentPage = 1;
		int totalDataCount = 0;
		
		if(pageNum.equals("")) {
			pageNum = "1";
		}
		
		if(pageNum!=null)
			currentPage = Integer.parseInt(pageNum);
		
		totalDataCount = dao.getIntValue("fileTestDB.dataCount");
		
		int numPerPage = 6;
		MyUtil myUtil = new MyUtil();
		int totalPage = myUtil.getPageCount(numPerPage, totalDataCount);
		
		if(currentPage>totalPage)
			currentPage = totalPage;
		
		int start = (currentPage-1)*numPerPage+1;
		int end = currentPage*numPerPage;
		
		Map<String, Object> hMap = new HashMap<String, Object>();
		hMap.put("start", start);
		hMap.put("end", end);		
		
		List<Object> lists = (List<Object>)dao.getListData("fileTestDB.listData",hMap);
		
		int listNum,n=0;
		
		
		Iterator<Object> it = lists.iterator();
		while(it.hasNext()) {
			FileTestDBDTO vo = (FileTestDBDTO)it.next();
			listNum = totalDataCount-(start+n-1);
			vo.setListNum(listNum);
			n++;
		}		
		
		String cp = request.getContextPath();
		String listUrl = cp + "/fileTestDB/list.action";
		
		String pageIndexList = 
				myUtil.pageIndexList(currentPage, totalPage, listUrl);
		
		String articleUrl = 
				cp + "/fileTestDB/write.action?pageNum=" + currentPage;		
		
		String deletePath = cp + "/fileTestDB/delete.action";
		String downloadPath = cp + "/fileTestDB/download.action";			
		String imagePath = cp + "/pds/data";
		
		request.setAttribute("lists", lists);
		request.setAttribute("pageIndexList", pageIndexList);
		request.setAttribute("pageNum", currentPage);
		request.setAttribute("totalPage", totalPage);
		request.setAttribute("imagePath", imagePath);		
		request.setAttribute("totalDataCount", totalDataCount);
		request.setAttribute("articleUrl", articleUrl);
		request.setAttribute("deletePath", deletePath);
		request.setAttribute("downloadPath", downloadPath);
		
		return SUCCESS;
	}
	
	public String delete() throws Exception{
		
		HttpServletRequest request = ServletActionContext.getRequest();
		CommonDAO dao = CommonDAOImpl.getInstance();
		HttpSession session = request.getSession();
		
		int num = Integer.parseInt(request.getParameter("num"));
		
		CustomInfo info = 
				(CustomInfo)session.getAttribute("customInfo");			
		
		if(info==null) {
			return SUCCESS;	
		}
		
		dto = (FileTestDBDTO)dao.getReadData("fileTestDB.readData",num);
		
		String root = session.getServletContext().getRealPath("/");
		String savePath = root + "pds" + File.separator + "data";
		
		if(dto.getUserIdTxt().equals(info.getUserId())){
			//파일 삭제
			FileManager.doFileDelete(dto.getSaveFileName(), savePath);
			
			//DB 삭제
			dao.deleteData("fileTestDB.deleteData", num);			
		}
		
		return SUCCESS;	
	}
	
	public String login() throws Exception{	
		
		return SUCCESS;	
	}
	
	public String login_ok() throws Exception{	
		
		HttpServletRequest request = ServletActionContext.getRequest();
		CommonDAO dao = CommonDAOImpl.getInstance();
		
		FileTestDBDTO ftdb_dto = (FileTestDBDTO)dao.getReadData("fileTestDB.readMember",dto.getUserId());
		
		if(ftdb_dto==null || (!ftdb_dto.getUserPwd().equals(dto.getUserPwd()))) {
			
			request.setAttribute("message", 
					"아이디 또는 패스워드를 정확히 입력하세요.");
			
			return LOGIN;
			
		}		
		
		HttpSession session = request.getSession();
		
		CustomInfo info = new CustomInfo();
		
		info.setUserId(dto.getUserId());
		info.setUserName(dto.getUserName());
		
		session.setAttribute("customInfo", info);		
		
		return SUCCESS;	
	}	
	
	public String logout() throws Exception{
		
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		
		session.removeAttribute("userId");//suzi삭제
		session.invalidate();//suzi라는 변수가 삭제
		
		return SUCCESS;	
	}
	
	public String join() throws Exception{
		return SUCCESS;	
	}	
	
	
	private InputStream inputStream; //파일 보기
	
	private String saveFileName;
	private String originalFileName;

	public InputStream getInputStream() {
		return inputStream;
	}

	public void setInputStream(InputStream inputStream) {
		this.inputStream = inputStream;
	}

	public String getSaveFileName() {
		return saveFileName;
	}

	public void setSaveFileName(String saveFileName) {
		this.saveFileName = saveFileName;
	}

	public String getOriginalFileName() {
		return originalFileName;
	}

	public void setOriginalFileName(String originalFileName) {
		this.originalFileName = originalFileName;
	}
	
}
